// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poc.proto

package prompb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RuleHealth int32

const (
	RuleHealth_HealthUnknown RuleHealth = 0
	RuleHealth_HealthGood    RuleHealth = 1
	RuleHealth_HealthBad     RuleHealth = 2
)

var RuleHealth_name = map[int32]string{
	0: "HealthUnknown",
	1: "HealthGood",
	2: "HealthBad",
}

var RuleHealth_value = map[string]int32{
	"HealthUnknown": 0,
	"HealthGood":    1,
	"HealthBad":     2,
}

func (x RuleHealth) String() string {
	return proto.EnumName(RuleHealth_name, int32(x))
}

func (RuleHealth) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ce085cb28d45762, []int{0}
}

type AlertState int32

const (
	AlertState_StateInactive AlertState = 0
	AlertState_StatePending  AlertState = 1
	AlertState_StateFiring   AlertState = 2
)

var AlertState_name = map[int32]string{
	0: "StateInactive",
	1: "StatePending",
	2: "StateFiring",
}

var AlertState_value = map[string]int32{
	"StateInactive": 0,
	"StatePending":  1,
	"StateFiring":   2,
}

func (x AlertState) String() string {
	return proto.EnumName(AlertState_name, int32(x))
}

func (AlertState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ce085cb28d45762, []int{1}
}

type LabelsPerSeries struct {
	LabelsArray          []*Labels `protobuf:"bytes,1,rep,name=LabelsArray,proto3" json:"LabelsArray,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LabelsPerSeries) Reset()         { *m = LabelsPerSeries{} }
func (m *LabelsPerSeries) String() string { return proto.CompactTextString(m) }
func (*LabelsPerSeries) ProtoMessage()    {}
func (*LabelsPerSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce085cb28d45762, []int{0}
}
func (m *LabelsPerSeries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsPerSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsPerSeries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsPerSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsPerSeries.Merge(m, src)
}
func (m *LabelsPerSeries) XXX_Size() int {
	return m.Size()
}
func (m *LabelsPerSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsPerSeries.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsPerSeries proto.InternalMessageInfo

func (m *LabelsPerSeries) GetLabelsArray() []*Labels {
	if m != nil {
		return m.LabelsArray
	}
	return nil
}

type Group struct {
	SeriesInPreviousEval []*LabelsPerSeries `protobuf:"bytes,1,rep,name=seriesInPreviousEval,proto3" json:"seriesInPreviousEval,omitempty"`
	StaleSeries          []*Labels          `protobuf:"bytes,2,rep,name=staleSeries,proto3" json:"staleSeries,omitempty"`
	EvaluationTime       int64              `protobuf:"varint,3,opt,name=evaluationTime,proto3" json:"evaluationTime,omitempty"`
	LastEvaluation       int64              `protobuf:"varint,4,opt,name=lastEvaluation,proto3" json:"lastEvaluation,omitempty"`
	ShouldRestore        bool               `protobuf:"varint,5,opt,name=shouldRestore,proto3" json:"shouldRestore,omitempty"`
	MarkStale            bool               `protobuf:"varint,6,opt,name=markStale,proto3" json:"markStale,omitempty"`
	Rules                []*Rule            `protobuf:"bytes,7,rep,name=Rules,proto3" json:"Rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce085cb28d45762, []int{1}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetSeriesInPreviousEval() []*LabelsPerSeries {
	if m != nil {
		return m.SeriesInPreviousEval
	}
	return nil
}

func (m *Group) GetStaleSeries() []*Labels {
	if m != nil {
		return m.StaleSeries
	}
	return nil
}

func (m *Group) GetEvaluationTime() int64 {
	if m != nil {
		return m.EvaluationTime
	}
	return 0
}

func (m *Group) GetLastEvaluation() int64 {
	if m != nil {
		return m.LastEvaluation
	}
	return 0
}

func (m *Group) GetShouldRestore() bool {
	if m != nil {
		return m.ShouldRestore
	}
	return false
}

func (m *Group) GetMarkStale() bool {
	if m != nil {
		return m.MarkStale
	}
	return false
}

func (m *Group) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type Rule struct {
	Name                 string     `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Restored             bool       `protobuf:"varint,2,opt,name=Restored,proto3" json:"Restored,omitempty"`
	EvaluationDuration   int64      `protobuf:"varint,3,opt,name=EvaluationDuration,proto3" json:"EvaluationDuration,omitempty"`
	EvaluationTimestamp  int64      `protobuf:"varint,4,opt,name=EvaluationTimestamp,proto3" json:"EvaluationTimestamp,omitempty"`
	Health               RuleHealth `protobuf:"varint,5,opt,name=Health,proto3,enum=prometheus.RuleHealth" json:"Health,omitempty"`
	LastError            string     `protobuf:"bytes,6,opt,name=LastError,proto3" json:"LastError,omitempty"`
	Active               []*Alert   `protobuf:"bytes,7,rep,name=Active,proto3" json:"Active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Rule) Reset()         { *m = Rule{} }
func (m *Rule) String() string { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()    {}
func (*Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce085cb28d45762, []int{2}
}
func (m *Rule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rule.Merge(m, src)
}
func (m *Rule) XXX_Size() int {
	return m.Size()
}
func (m *Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Rule proto.InternalMessageInfo

func (m *Rule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Rule) GetRestored() bool {
	if m != nil {
		return m.Restored
	}
	return false
}

func (m *Rule) GetEvaluationDuration() int64 {
	if m != nil {
		return m.EvaluationDuration
	}
	return 0
}

func (m *Rule) GetEvaluationTimestamp() int64 {
	if m != nil {
		return m.EvaluationTimestamp
	}
	return 0
}

func (m *Rule) GetHealth() RuleHealth {
	if m != nil {
		return m.Health
	}
	return RuleHealth_HealthUnknown
}

func (m *Rule) GetLastError() string {
	if m != nil {
		return m.LastError
	}
	return ""
}

func (m *Rule) GetActive() []*Alert {
	if m != nil {
		return m.Active
	}
	return nil
}

type Alert struct {
	Id                   uint64     `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Labels               *Labels    `protobuf:"bytes,2,opt,name=Labels,proto3" json:"Labels,omitempty"`
	Annotations          *Labels    `protobuf:"bytes,3,opt,name=Annotations,proto3" json:"Annotations,omitempty"`
	Value                float64    `protobuf:"fixed64,4,opt,name=Value,proto3" json:"Value,omitempty"`
	ActiveAt             int64      `protobuf:"varint,5,opt,name=ActiveAt,proto3" json:"ActiveAt,omitempty"`
	FiredAt              int64      `protobuf:"varint,6,opt,name=FiredAt,proto3" json:"FiredAt,omitempty"`
	ResolvedAt           int64      `protobuf:"varint,7,opt,name=ResolvedAt,proto3" json:"ResolvedAt,omitempty"`
	LastSentAt           int64      `protobuf:"varint,8,opt,name=LastSentAt,proto3" json:"LastSentAt,omitempty"`
	ValidUntil           int64      `protobuf:"varint,9,opt,name=ValidUntil,proto3" json:"ValidUntil,omitempty"`
	State                AlertState `protobuf:"varint,10,opt,name=State,proto3,enum=prometheus.AlertState" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Alert) Reset()         { *m = Alert{} }
func (m *Alert) String() string { return proto.CompactTextString(m) }
func (*Alert) ProtoMessage()    {}
func (*Alert) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce085cb28d45762, []int{3}
}
func (m *Alert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Alert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Alert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Alert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Alert.Merge(m, src)
}
func (m *Alert) XXX_Size() int {
	return m.Size()
}
func (m *Alert) XXX_DiscardUnknown() {
	xxx_messageInfo_Alert.DiscardUnknown(m)
}

var xxx_messageInfo_Alert proto.InternalMessageInfo

func (m *Alert) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Alert) GetLabels() *Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Alert) GetAnnotations() *Labels {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Alert) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Alert) GetActiveAt() int64 {
	if m != nil {
		return m.ActiveAt
	}
	return 0
}

func (m *Alert) GetFiredAt() int64 {
	if m != nil {
		return m.FiredAt
	}
	return 0
}

func (m *Alert) GetResolvedAt() int64 {
	if m != nil {
		return m.ResolvedAt
	}
	return 0
}

func (m *Alert) GetLastSentAt() int64 {
	if m != nil {
		return m.LastSentAt
	}
	return 0
}

func (m *Alert) GetValidUntil() int64 {
	if m != nil {
		return m.ValidUntil
	}
	return 0
}

func (m *Alert) GetState() AlertState {
	if m != nil {
		return m.State
	}
	return AlertState_StateInactive
}

func init() {
	proto.RegisterEnum("prometheus.RuleHealth", RuleHealth_name, RuleHealth_value)
	proto.RegisterEnum("prometheus.AlertState", AlertState_name, AlertState_value)
	proto.RegisterType((*LabelsPerSeries)(nil), "prometheus.LabelsPerSeries")
	proto.RegisterType((*Group)(nil), "prometheus.Group")
	proto.RegisterType((*Rule)(nil), "prometheus.Rule")
	proto.RegisterType((*Alert)(nil), "prometheus.Alert")
}

func init() { proto.RegisterFile("poc.proto", fileDescriptor_3ce085cb28d45762) }

var fileDescriptor_3ce085cb28d45762 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x5d, 0x6b, 0xdb, 0x30,
	0x14, 0xad, 0x9d, 0x8f, 0x36, 0x37, 0x6b, 0xea, 0xde, 0x95, 0x21, 0xba, 0x11, 0x42, 0x18, 0x25,
	0x2b, 0x23, 0x8c, 0x6e, 0xcf, 0x03, 0x97, 0xb5, 0x5d, 0xa0, 0x6c, 0x45, 0x59, 0xfb, 0xb0, 0x37,
	0xb5, 0x16, 0xab, 0xa9, 0x62, 0x19, 0x49, 0xce, 0xe8, 0xcf, 0xd8, 0xbf, 0x1a, 0x7b, 0x1a, 0xec,
	0x0f, 0x8c, 0xfe, 0x92, 0x21, 0xc9, 0x8b, 0x9d, 0x36, 0x7d, 0xd3, 0x3d, 0xe7, 0xf8, 0xea, 0x9e,
	0xa3, 0x8b, 0xa1, 0x93, 0xcb, 0xab, 0x71, 0xae, 0xa4, 0x91, 0x08, 0xb9, 0x92, 0x33, 0x6e, 0xae,
	0x79, 0xa1, 0x77, 0xbb, 0xe6, 0x36, 0xe7, 0xda, 0x13, 0xc3, 0x13, 0xd8, 0x3a, 0x65, 0x97, 0x5c,
	0xe8, 0x33, 0xae, 0xa6, 0x5c, 0xa5, 0x5c, 0xe3, 0x3b, 0xe8, 0x7a, 0x28, 0x56, 0x8a, 0xdd, 0x92,
	0x60, 0xd0, 0x18, 0x75, 0x0f, 0x70, 0x5c, 0x75, 0x18, 0x7b, 0x9a, 0xd6, 0x65, 0xc3, 0x5f, 0x21,
	0xb4, 0x4e, 0x94, 0x2c, 0x72, 0xfc, 0x0c, 0x3b, 0xda, 0x75, 0x9a, 0x64, 0x67, 0x8a, 0xcf, 0x53,
	0x59, 0xe8, 0xa3, 0x39, 0x13, 0x65, 0xa3, 0xe7, 0x0f, 0x1b, 0x2d, 0xae, 0xa6, 0x2b, 0x3f, 0xb4,
	0x03, 0x69, 0xc3, 0x04, 0xf7, 0x22, 0x12, 0x3e, 0x3e, 0x50, 0x4d, 0x86, 0x7b, 0xd0, 0xe3, 0x73,
	0x26, 0x0a, 0x66, 0x52, 0x99, 0x7d, 0x49, 0x67, 0x9c, 0x34, 0x06, 0xc1, 0xa8, 0x41, 0xef, 0xa1,
	0x56, 0x27, 0x98, 0x36, 0x47, 0x0b, 0x94, 0x34, 0xbd, 0x6e, 0x19, 0xc5, 0x97, 0xb0, 0xa9, 0xaf,
	0x65, 0x21, 0x12, 0xca, 0xb5, 0x91, 0x8a, 0x93, 0xd6, 0x20, 0x18, 0x6d, 0xd0, 0x65, 0x10, 0x5f,
	0x40, 0x67, 0xc6, 0xd4, 0xcd, 0xd4, 0x0e, 0x42, 0xda, 0x4e, 0x51, 0x01, 0xb8, 0x07, 0x2d, 0x5a,
	0x08, 0xae, 0xc9, 0xba, 0xf3, 0x10, 0xd5, 0x3d, 0x58, 0x82, 0x7a, 0x7a, 0xf8, 0x23, 0x84, 0xa6,
	0x3d, 0x21, 0x42, 0xf3, 0x13, 0x9b, 0x71, 0x12, 0x0c, 0x82, 0x51, 0x87, 0xba, 0x33, 0xee, 0xc2,
	0x46, 0x79, 0x5b, 0x42, 0x42, 0x77, 0xc3, 0xa2, 0xc6, 0x31, 0x60, 0x35, 0xf2, 0x87, 0x42, 0x79,
	0x43, 0xde, 0xf8, 0x0a, 0x06, 0xdf, 0xc0, 0xd3, 0xa3, 0xa5, 0x38, 0xb4, 0x61, 0xb3, 0xbc, 0x4c,
	0x60, 0x15, 0x85, 0x63, 0x68, 0x7f, 0xe4, 0x4c, 0x98, 0x6b, 0xe7, 0xbf, 0x77, 0xf0, 0xec, 0xbe,
	0x07, 0xcf, 0xd2, 0x52, 0x65, 0x03, 0x39, 0xb5, 0x41, 0x2a, 0x25, 0x95, 0x0b, 0xa4, 0x43, 0x2b,
	0x00, 0x5f, 0x41, 0x3b, 0xbe, 0x32, 0xe9, 0x9c, 0x97, 0x89, 0x6c, 0xd7, 0xbb, 0xc5, 0x82, 0x2b,
	0x43, 0x4b, 0xc1, 0xf0, 0x4f, 0x08, 0x2d, 0x87, 0x60, 0x0f, 0xc2, 0x49, 0xe2, 0x22, 0x69, 0xd2,
	0x70, 0x92, 0xe0, 0x3e, 0xb4, 0xfd, 0x02, 0xb8, 0x38, 0x56, 0xaf, 0x46, 0xa9, 0xb0, 0xbb, 0x14,
	0x67, 0x99, 0x34, 0xce, 0x95, 0x76, 0xc9, 0x3c, 0xb2, 0x4b, 0x35, 0x19, 0xee, 0x40, 0xeb, 0x82,
	0x89, 0x82, 0xbb, 0x60, 0x02, 0xea, 0x0b, 0xfb, 0x10, 0x7e, 0xb6, 0xd8, 0xb8, 0x30, 0x1a, 0x74,
	0x51, 0x23, 0x81, 0xf5, 0xe3, 0x54, 0xf1, 0x24, 0x36, 0xce, 0x74, 0x83, 0xfe, 0x2f, 0xb1, 0x0f,
	0x40, 0xb9, 0x96, 0x62, 0xee, 0xc8, 0x75, 0x47, 0xd6, 0x10, 0xcb, 0xdb, 0x7c, 0xa6, 0x3c, 0x33,
	0xb1, 0x21, 0x1b, 0x9e, 0xaf, 0x10, 0xcb, 0x5f, 0x30, 0x91, 0x26, 0xe7, 0x99, 0x49, 0x05, 0xe9,
	0x78, 0xbe, 0x42, 0xf0, 0x35, 0xb4, 0xa6, 0x86, 0x19, 0x4e, 0xe0, 0xe1, 0xfb, 0xb8, 0xfc, 0x1c,
	0x4b, 0xbd, 0x68, 0xff, 0x3d, 0x40, 0xf5, 0x68, 0xb8, 0x0d, 0x9b, 0xfe, 0x74, 0x9e, 0xdd, 0x64,
	0xf2, 0x7b, 0x16, 0xad, 0x61, 0x0f, 0xc0, 0x43, 0x27, 0x52, 0x26, 0x51, 0x80, 0x9b, 0xd0, 0xf1,
	0xf5, 0x21, 0x4b, 0xa2, 0x70, 0xff, 0x10, 0xa0, 0x6a, 0x6a, 0xbf, 0x77, 0x87, 0x49, 0xc6, 0x5c,
	0x10, 0xd1, 0x1a, 0x46, 0xf0, 0xc4, 0x41, 0x67, 0x3c, 0x4b, 0xd2, 0xec, 0x5b, 0x14, 0xe0, 0x16,
	0x74, 0x1d, 0x72, 0x9c, 0x2a, 0x0b, 0x84, 0x87, 0x3b, 0x3f, 0xef, 0xfa, 0xc1, 0xef, 0xbb, 0x7e,
	0xf0, 0xf7, 0xae, 0x1f, 0x7c, 0x6d, 0xdb, 0x79, 0xf3, 0xcb, 0xcb, 0xb6, 0xfb, 0x41, 0xbd, 0xfd,
	0x17, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xd8, 0x36, 0x34, 0xc6, 0x04, 0x00, 0x00,
}

func (m *LabelsPerSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsPerSeries) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LabelsArray) > 0 {
		for _, msg := range m.LabelsArray {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPoc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SeriesInPreviousEval) > 0 {
		for _, msg := range m.SeriesInPreviousEval {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPoc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.StaleSeries) > 0 {
		for _, msg := range m.StaleSeries {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPoc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.EvaluationTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.EvaluationTime))
	}
	if m.LastEvaluation != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.LastEvaluation))
	}
	if m.ShouldRestore {
		dAtA[i] = 0x28
		i++
		if m.ShouldRestore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MarkStale {
		dAtA[i] = 0x30
		i++
		if m.MarkStale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintPoc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Rule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPoc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Restored {
		dAtA[i] = 0x10
		i++
		if m.Restored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EvaluationDuration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.EvaluationDuration))
	}
	if m.EvaluationTimestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.EvaluationTimestamp))
	}
	if m.Health != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.Health))
	}
	if len(m.LastError) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPoc(dAtA, i, uint64(len(m.LastError)))
		i += copy(dAtA[i:], m.LastError)
	}
	if len(m.Active) > 0 {
		for _, msg := range m.Active {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintPoc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Alert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Alert) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.Id))
	}
	if m.Labels != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.Labels.Size()))
		n1, err1 := m.Labels.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.Annotations != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.Annotations.Size()))
		n2, err2 := m.Annotations.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.Value != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	if m.ActiveAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.ActiveAt))
	}
	if m.FiredAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.FiredAt))
	}
	if m.ResolvedAt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.ResolvedAt))
	}
	if m.LastSentAt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.LastSentAt))
	}
	if m.ValidUntil != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.ValidUntil))
	}
	if m.State != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPoc(dAtA, i, uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPoc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LabelsPerSeries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelsArray) > 0 {
		for _, e := range m.LabelsArray {
			l = e.Size()
			n += 1 + l + sovPoc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SeriesInPreviousEval) > 0 {
		for _, e := range m.SeriesInPreviousEval {
			l = e.Size()
			n += 1 + l + sovPoc(uint64(l))
		}
	}
	if len(m.StaleSeries) > 0 {
		for _, e := range m.StaleSeries {
			l = e.Size()
			n += 1 + l + sovPoc(uint64(l))
		}
	}
	if m.EvaluationTime != 0 {
		n += 1 + sovPoc(uint64(m.EvaluationTime))
	}
	if m.LastEvaluation != 0 {
		n += 1 + sovPoc(uint64(m.LastEvaluation))
	}
	if m.ShouldRestore {
		n += 2
	}
	if m.MarkStale {
		n += 2
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovPoc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Rule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPoc(uint64(l))
	}
	if m.Restored {
		n += 2
	}
	if m.EvaluationDuration != 0 {
		n += 1 + sovPoc(uint64(m.EvaluationDuration))
	}
	if m.EvaluationTimestamp != 0 {
		n += 1 + sovPoc(uint64(m.EvaluationTimestamp))
	}
	if m.Health != 0 {
		n += 1 + sovPoc(uint64(m.Health))
	}
	l = len(m.LastError)
	if l > 0 {
		n += 1 + l + sovPoc(uint64(l))
	}
	if len(m.Active) > 0 {
		for _, e := range m.Active {
			l = e.Size()
			n += 1 + l + sovPoc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Alert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPoc(uint64(m.Id))
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovPoc(uint64(l))
	}
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovPoc(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.ActiveAt != 0 {
		n += 1 + sovPoc(uint64(m.ActiveAt))
	}
	if m.FiredAt != 0 {
		n += 1 + sovPoc(uint64(m.FiredAt))
	}
	if m.ResolvedAt != 0 {
		n += 1 + sovPoc(uint64(m.ResolvedAt))
	}
	if m.LastSentAt != 0 {
		n += 1 + sovPoc(uint64(m.LastSentAt))
	}
	if m.ValidUntil != 0 {
		n += 1 + sovPoc(uint64(m.ValidUntil))
	}
	if m.State != 0 {
		n += 1 + sovPoc(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPoc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoc(x uint64) (n int) {
	return sovPoc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LabelsPerSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsPerSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsPerSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelsArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelsArray = append(m.LabelsArray, &Labels{})
			if err := m.LabelsArray[len(m.LabelsArray)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesInPreviousEval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeriesInPreviousEval = append(m.SeriesInPreviousEval, &LabelsPerSeries{})
			if err := m.SeriesInPreviousEval[len(m.SeriesInPreviousEval)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleSeries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaleSeries = append(m.StaleSeries, &Labels{})
			if err := m.StaleSeries[len(m.StaleSeries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationTime", wireType)
			}
			m.EvaluationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvaluationTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEvaluation", wireType)
			}
			m.LastEvaluation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastEvaluation |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldRestore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShouldRestore = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkStale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MarkStale = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &Rule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restored = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationDuration", wireType)
			}
			m.EvaluationDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvaluationDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationTimestamp", wireType)
			}
			m.EvaluationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvaluationTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			m.Health = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Health |= RuleHealth(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Active = append(m.Active, &Alert{})
			if err := m.Active[len(m.Active)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Alert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Alert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Alert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &Labels{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = &Labels{}
			}
			if err := m.Annotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveAt", wireType)
			}
			m.ActiveAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FiredAt", wireType)
			}
			m.FiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedAt", wireType)
			}
			m.ResolvedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSentAt", wireType)
			}
			m.LastSentAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSentAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
			}
			m.ValidUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidUntil |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= AlertState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPoc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPoc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPoc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPoc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPoc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPoc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoc   = fmt.Errorf("proto: integer overflow")
)
